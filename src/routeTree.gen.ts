/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as guardGuardImport } from './routes/(guard)/_guard';
import { Route as authAuthImport } from './routes/(auth)/_auth';
import { Route as guardGuardIndexImport } from './routes/(guard)/_guard/index';
import { Route as authAuthSignInImport } from './routes/(auth)/_auth/sign-in';

// Create Virtual Routes

const guardImport = createFileRoute('/(guard)')();
const authImport = createFileRoute('/(auth)')();

// Create/Update Routes

const guardRoute = guardImport.update({
  id: '/(guard)',
  getParentRoute: () => rootRoute,
} as any);

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any);

const guardGuardRoute = guardGuardImport.update({
  id: '/_guard',
  getParentRoute: () => guardRoute,
} as any);

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any);

const guardGuardIndexRoute = guardGuardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => guardGuardRoute,
} as any);

const authAuthSignInRoute = authAuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authAuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof authImport;
      parentRoute: typeof rootRoute;
    };
    '/(auth)/_auth': {
      id: '/(auth)/_auth';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof authAuthImport;
      parentRoute: typeof authRoute;
    };
    '/(guard)': {
      id: '/(guard)';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof guardImport;
      parentRoute: typeof rootRoute;
    };
    '/(guard)/_guard': {
      id: '/(guard)/_guard';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof guardGuardImport;
      parentRoute: typeof guardRoute;
    };
    '/(auth)/_auth/sign-in': {
      id: '/(auth)/_auth/sign-in';
      path: '/sign-in';
      fullPath: '/sign-in';
      preLoaderRoute: typeof authAuthSignInImport;
      parentRoute: typeof authAuthImport;
    };
    '/(guard)/_guard/': {
      id: '/(guard)/_guard/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof guardGuardIndexImport;
      parentRoute: typeof guardGuardImport;
    };
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthSignInRoute: typeof authAuthSignInRoute;
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthSignInRoute: authAuthSignInRoute,
};

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(authAuthRouteChildren);

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren;
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
};

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren);

interface guardGuardRouteChildren {
  guardGuardIndexRoute: typeof guardGuardIndexRoute;
}

const guardGuardRouteChildren: guardGuardRouteChildren = {
  guardGuardIndexRoute: guardGuardIndexRoute,
};

const guardGuardRouteWithChildren = guardGuardRoute._addFileChildren(guardGuardRouteChildren);

interface guardRouteChildren {
  guardGuardRoute: typeof guardGuardRouteWithChildren;
}

const guardRouteChildren: guardRouteChildren = {
  guardGuardRoute: guardGuardRouteWithChildren,
};

const guardRouteWithChildren = guardRoute._addFileChildren(guardRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof guardGuardIndexRoute;
  '/sign-in': typeof authAuthSignInRoute;
}

export interface FileRoutesByTo {
  '/': typeof guardGuardIndexRoute;
  '/sign-in': typeof authAuthSignInRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/(auth)': typeof authRouteWithChildren;
  '/(auth)/_auth': typeof authAuthRouteWithChildren;
  '/(guard)': typeof guardRouteWithChildren;
  '/(guard)/_guard': typeof guardGuardRouteWithChildren;
  '/(auth)/_auth/sign-in': typeof authAuthSignInRoute;
  '/(guard)/_guard/': typeof guardGuardIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/sign-in';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/sign-in';
  id: '__root__' | '/(auth)' | '/(auth)/_auth' | '/(guard)' | '/(guard)/_guard' | '/(auth)/_auth/sign-in' | '/(guard)/_guard/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren;
  guardRoute: typeof guardRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  guardRoute: guardRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(guard)"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/sign-in"
      ]
    },
    "/(guard)": {
      "filePath": "(guard)",
      "children": [
        "/(guard)/_guard"
      ]
    },
    "/(guard)/_guard": {
      "filePath": "(guard)/_guard.tsx",
      "parent": "/(guard)",
      "children": [
        "/(guard)/_guard/"
      ]
    },
    "/(auth)/_auth/sign-in": {
      "filePath": "(auth)/_auth/sign-in.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(guard)/_guard/": {
      "filePath": "(guard)/_guard/index.tsx",
      "parent": "/(guard)/_guard"
    }
  }
}
ROUTE_MANIFEST_END */
